.data
ln : 	.asciiz "\n"
vrai : 	.asciiz "vrai"
faux : 	.asciiz "faux"

.text
main :

move $s7,$sp

addi $sp, $sp, -4

#Déclaration - initialisation à zéro
sw $zero, 0($s7)
#Déclaration fonction
j fonctionskip0
fonc10:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
addi $sp, $sp, -4
#Déclaration - initialisation à zéro
sw $zero, 0($s7)
#Affectation
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, 0($s7)
#Retour de la fonction 
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 4($sp)
jr $ra
fonctionskip0:
#Déclaration fonction
j fonctionskip1
fonc20:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
addi $sp, $sp, 0
#Affectation
move $a2, $sp
move $a3, $s7
lw $s7, 12($s7)
lw $v0, 0($s7)
move $sp, $a2
move $s7, $a3
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a2, $sp
move $a3, $s7
lw $s7, 12($s7)
sw $v0, 0($s7)
move $sp, $a2
move $s7, $a3
#Retour de la fonction 
move $a2, $sp
move $a3, $s7
lw $s7, 12($s7)
lw $v0, 0($s7)
move $sp, $a2
move $s7, $a3
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 4($sp)
jr $ra
fonctionskip1:
#Déclaration fonction
j fonctionskip2
proxy10:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
addi $sp, $sp, 0
#Retour de la fonction 
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fonc20
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 4($sp)
jr $ra
fonctionskip2:
#Déclaration fonction
j fonctionskip3
proxy20:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
addi $sp, $sp, 0
#Retour de la fonction 
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal proxy10
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 4($sp)
jr $ra
fonctionskip3:
#Déclaration fonction
j fonctionskip4
proxy30:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
addi $sp, $sp, 0
#Retour de la fonction 
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal proxy20
li $v0, 2
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
mult $v0, $t8
mflo $v0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 4($sp)
jr $ra
fonctionskip4:
#Déclaration fonction
j fonctionskip5
proxy40:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
addi $sp, $sp, 0
#Retour de la fonction 
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal proxy30
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal proxy30
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
mult $v0, $t8
mflo $v0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 4($sp)
jr $ra
fonctionskip5:
#Affectation
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, 0($s7)
#Ecriture
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal fonc10
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal proxy40
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall


end :

li $v0, 10
syscall 
