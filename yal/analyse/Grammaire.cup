package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.tds.*;
import yal.tds.entree.*;
import yal.tds.symbole.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, ENTIER, EGALE, TANTQUE, REPETER, FINTANTQUE, PAROUVRANTE, PARFERMANTE, SI, ALORS, SINON, FINSI ;
terminal String    IDF, CSTENTIERE, OPER, OPELOGIQUE, OPERMULT ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST ;
non terminal ExpressionBinaire EXP, EXPF;
non terminal ExpressionLogique EXPLOG, EXPLOGF;
non terminal Instruction DECL_VAR, DECLARATION, AFFECT, BOUCLE, CONDITION ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LINST:li  FIN
                {: RESULT = li ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {:
                   BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                DECLARATION:d POINTVIRGULE
                {: RESULT = d; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(ileft + 1, new Idf(ileft + 1, i)) ; :}
        |
                AFFECT:a POINTVIRGULE
                {: RESULT = a; :}
        |
                BOUCLE:b
                {: RESULT = b; :}
        |
                CONDITION:c
                {: RESULT = c; :}
                ;

BOUCLE  ::=     TANTQUE EXPLOG:el REPETER LINST:li FINTANTQUE
                {: RESULT = new BoucleWhile(elleft+1, li, el) ; :}
                ;

CONDITION ::=   SI EXPLOG:e ALORS LINST:lia FINSI
                {: RESULT = new Condition(eleft+1,e,lia); :}
        |
                SI EXPLOG:e ALORS LINST:lia SINON LINST:lib FINSI
                {: RESULT = new Condition(eleft+1,e,lia,lib); :}
                ;

AFFECT  ::=     IDF:i EGALE EXP:e
                {: RESULT = new Affectation(eleft+1, new Idf(ileft + 1, i), e); :}
                ;

EXP    ::=      EXP:g OPER:o EXPF:d
                {: RESULT = new ExpressionBinaire(gleft + 1, g, o, d); :}
       |
                EXPF:e
                {: RESULT = e; :}
                ;

EXPLOG  ::=     EXPLOG:g OPERMULT:o EXPLOGF:d
                {: RESULT = new ExpressionLogique(gleft+1, g, o, d); :}
       |
                EXPLOGF:e
                {: RESULT = e; :}
                ;

EXPLOGF ::=     EXP:g OPELOGIQUE:o EXP:d
                {: RESULT = new ExpressionLogique(gleft+1, g, o, d); :}
                ;

EXPF   ::=      CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
       |
                IDF:i
                {: RESULT = new Idf(ileft + 1, i) ; :}
                ;

DECLARATION ::= DECL_VAR:d
                {: RESULT = d ; :}
                ;

DECL_VAR ::=    ENTIER IDF:i
                {: TDS.getInstance().ajouter(new EntreeVariable(i, ileft+1), new SymboleVariable(Valeurs.getInstance().getTaillePile()));
                   Valeurs.getInstance().empiler();
                   RESULT = new Declarer(ileft+1, i);
                :}
                ;