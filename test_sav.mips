.data
ln : 	.asciiz "\n"
vrai : 	.asciiz "vrai"
faux : 	.asciiz "faux"

.text
main :

move $s7,$sp

addi $sp, $sp, -8

#Déclaration fonction
j fonctionskip0
successeur1:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
lw $v0, 16($sp)
sw $v0,0($s7)
addi $sp, $sp, -4
addi $sp, $sp, -8
#Retour de la fonction 
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 8($sp)
jr $ra
fonctionskip0:
#Déclaration fonction
j fonctionskip1
predecesseur1:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
lw $v0, 16($sp)
sw $v0,0($s7)
addi $sp, $sp, -4
addi $sp, $sp, -8
#Retour de la fonction 
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
sub $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 8($sp)
jr $ra
fonctionskip1:
#Déclaration fonction
j fonctionskip2
addition2:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
lw $v0, 20($sp)
sw $v0,0($s7)
addi $sp, $sp, -4
lw $v0, 20($sp)
sw $v0,-4($s7)
addi $sp, $sp, -4
addi $sp, $sp, -16
#Condition
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
ble $v0, $t8, condcompafaux1
condcompavrai1: 
li $v0, 1
b fincondcompa1
condcompafaux1: 
li $v0, 0
fincondcompa1: 
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, sinon1
#Retour de la fonction 
addi $sp, $sp, -4
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal predecesseur1
addi $sp, $sp, 4
addi $sp, $sp, -4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal successeur1
addi $sp, $sp, 4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal addition2
addi $sp, $sp, 4
addi $sp, $sp, 4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
b finCond1
sinon1: 
#Retour de la fonction 
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
finCond1:
fonctionskip2:
#Déclaration fonction
j fonctionskip3
soustraction2:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
lw $v0, 20($sp)
sw $v0,0($s7)
addi $sp, $sp, -4
lw $v0, 20($sp)
sw $v0,-4($s7)
addi $sp, $sp, -4
addi $sp, $sp, -16
#Condition
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
ble $v0, $t8, condcompafaux2
condcompavrai2: 
li $v0, 1
b fincondcompa2
condcompafaux2: 
li $v0, 0
fincondcompa2: 
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, sinon2
#Retour de la fonction 
addi $sp, $sp, -4
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal predecesseur1
addi $sp, $sp, 4
addi $sp, $sp, -4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal predecesseur1
addi $sp, $sp, 4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal soustraction2
addi $sp, $sp, 4
addi $sp, $sp, 4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
b finCond2
sinon2: 
#Retour de la fonction 
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
finCond2:
fonctionskip3:
#Déclaration fonction
j fonctionskip4
multiplication2:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s7, ($sp)
addi $sp, $sp, -4
move $s7, $sp
lw $v0, 20($sp)
sw $v0,0($s7)
addi $sp, $sp, -4
lw $v0, 20($sp)
sw $v0,-4($s7)
addi $sp, $sp, -4
addi $sp, $sp, -16
#Condition
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bne $v0, $t8, condcompafaux3
condcompavrai3: 
li $v0, 1
b fincondcompa3
condcompafaux3: 
li $v0, 0
fincondcompa3: 
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bne $v0, $t8, condcompafaux4
condcompavrai4: 
li $v0, 1
b fincondcompa4
condcompafaux4: 
li $v0, 0
fincondcompa4: 
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
or $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, sinon3
#Retour de la fonction 
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
b finCond3
sinon3: 
#Condition
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bne $v0, $t8, condcompafaux5
condcompavrai5: 
li $v0, 1
b fincondcompa5
condcompafaux5: 
li $v0, 0
fincondcompa5: 
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, sinon4
#Retour de la fonction 
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
b finCond4
sinon4: 
#Retour de la fonction 
addi $sp, $sp, -4
addi $sp, $sp, -4
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal predecesseur1
addi $sp, $sp, 4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal multiplication2
addi $sp, $sp, 4
addi $sp, $sp, 4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal addition2
addi $sp, $sp, 4
addi $sp, $sp, 4
addi $sp,$sp, 4
lw $v0, 0($sp)
move $sp, $s7
lw $ra, 8($s7)
lw $s7, 4($s7)
addi $sp, $sp, 12
sw $v0, 12($sp)
jr $ra
finCond4:
finCond3:
fonctionskip4:
#Déclaration - inititialisation à zéro
sw $zero, 0($s7)
#Déclaration - inititialisation à zéro
sw $zero, -4($s7)
#Affectation
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, 0($s7)
#Affectation
li $v0, 3
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -4($s7)
#Ecriture
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal predecesseur1
addi $sp, $sp, 4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal successeur1
addi $sp, $sp, 4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
addi $sp, $sp, -4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal addition2
addi $sp, $sp, 4
addi $sp, $sp, 4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
addi $sp, $sp, -4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal soustraction2
addi $sp, $sp, 4
addi $sp, $sp, 4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Ecriture
addi $sp, $sp, -4
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)
addi $sp, $sp, -4
jal multiplication2
addi $sp, $sp, 4
addi $sp, $sp, 4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall


end :

li $v0, 10
syscall 
